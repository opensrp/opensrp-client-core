description = 'OpenSRP core client library'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.apache.commons:commons-lang3:3.10'
        classpath 'io.fabric.tools:gradle:1.31.2'
    }
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
}

apply plugin: 'com.android.library'
//apply plugin: 'org.robolectric'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven-publish'
jacoco {
    toolVersion = "0.8.5"
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    signingConfigs {
        config {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("$rootDir/assets/security/debug.keystore")
            storePassword 'android'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled = true
            signingConfig signingConfigs.config
            zipAlignEnabled true
            buildConfigField "String", "TRUST_MANAGER_ALGORITHM", "\"X509\""
            buildConfigField "String", "SSL_CONTEXT_PROTOCOL", "\"TLSv1.2\""
            buildConfigField "String", "OPENSRP_TRUSTORE_PASS", "\"phone red pen\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            buildConfigField "String", "TRUST_MANAGER_ALGORITHM", "\"X509\""
            buildConfigField "String", "SSL_CONTEXT_PROTOCOL", "\"TLSv1.2\""
            buildConfigField "String", "OPENSRP_TRUSTORE_PASS", "\"phone red pen\""
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        // Enabling multidex support.
        multiDexEnabled true
        //applicationId "org.smartregister"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "int", "DB_ENCRYPTION_VERSION", '1'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDir 'src/main/java'
            res.srcDirs = ['res']
            assets.srcDir 'assets'
            jniLibs.srcDirs 'src/main/native'
            resources.srcDir 'resources'
        }
        androidTest.setRoot('src/androidTest')
    }

    aaptOptions {
        noCompress 'apk'
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/*'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    testLogging {
        // Enables easier debugging of tests in Github Actions CI
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
    }
    maxHeapSize = "4g"
}

def filesToCopy = copySpec {
    from "${projectDir}/src/test/resources"
}

task copyTestResources() {
    def path = "${buildDir}/intermediates/classes/test"
    def paths = ["${path}/debug", "${path}/release"]
    paths.each { dest ->
        copy {
            with filesToCopy
            into dest
        }
    }
}

afterEvaluate {
    assembleDebug.dependsOn(copyTestResources)
}
configurations.all {
    resolutionStrategy.force 'commons-codec:commons-codec:1.10'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.5'
    implementation 'net.zetetic:android-database-sqlcipher:4.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "org.apache.httpcomponents:httpmime:4.5.6"
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.10'
    implementation group: 'com.google.guava', name: 'guava', version: '24.1-jre'
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.mozilla:rhino:1.7R4'
    implementation 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'
    api 'joda-time:joda-time:2.10.5'
    implementation('com.github.bmelnychuk:atv:1.2.9') {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation('com.github.johnkil.print:print:1.3.1') {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    implementation('ch.acra:acra:4.5.0') {
        exclude group: 'org.json', module: 'json'
    }

    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    implementation 'com.mcxiaoke.volley:library:1.0.19'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    implementation 'com.cloudant:cloudant-http:2.7.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.security:security-crypto:1.0.0-rc03'

    implementation('com.google.android.material:material:1.1.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    implementation('com.evernote:android-job:1.2.6') {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation group: 'commons-validator', name: 'commons-validator', version: '1.6'
    implementation('de.hdodenhof:circleimageview:3.1.0') {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation('org.smartregister:android-p2p-sync:0.3.7-SNAPSHOT') {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'android.arch.core', module: 'runtime'
    }

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'org.smartregister:opensrp-client-utils:0.0.4-SNAPSHOT'

    implementation 'org.smartregister:opensrp-plan-evaluator:1.6.2-SNAPSHOT'

    implementation 'xerces:xercesImpl:2.12.0'

    implementation('ch.acra:acra:4.5.0') {
        exclude group: 'org.json', module: 'json'
    }

    implementation 'com.github.ybq:Android-SpinKit:1.2.0'
    implementation 'com.mcxiaoke.volley:library:1.0.19'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    implementation 'com.cloudant:cloudant-http:2.7.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    implementation('com.android.support:design:28.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    implementation 'com.evernote:android-job:1.2.6'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.6'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'xerces:xercesImpl:2.12.0'

    // Add the dependency for the Performance Monitoring library
    implementation 'com.google.firebase:firebase-perf:19.0.7'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestImplementation 'junit:junit:4.13'

    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testAnnotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    testImplementation('org.robolectric:robolectric:4.3.1') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'com.android.support'
        exclude group: 'androidx.test'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }

    testImplementation('org.robolectric:shadows-multidex:4.3.1') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // PowerMock
    def powerMockVersion = '2.0.4'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-javaagent:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation("org.powermock:powermock-classloading-xstream:$powerMockVersion")

    def fragmentVersion = "1.2.5"
    testImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
}

task clearJar(type: Delete) {
    delete 'build/libs/myCompiledLibrary.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'myCompiledLibrary.jar')
}

makeJar.dependsOn(clearJar, build)

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

apply from: '../maven.gradle'